import React, { useState, useEffect } from 'react';
import Web3 from 'web3';
import MessengerContract from './contracts/Messenger.json'; // ABI generated by Truffle

function App() {
  const [account, setAccount] = useState('');
  const [contract, setContract] = useState(null);
  const [messages, setMessages] = useState([]);
  const [recipient, setRecipient] = useState('');
  const [messageContent, setMessageContent] = useState('');
  const [status, setStatus] = useState('Connecting to blockchain...');

  useEffect(() => {
    const init = async () => {
      try {
        // Check for MetaMask
        if (window.ethereum) {
          const web3 = new Web3(window.ethereum);
          
          // Request account access
          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
          setAccount(accounts[0]);

          // Get the contract instance.
          const networkId = await web3.eth.net.getId();
          const deployedNetwork = MessengerContract.networks[networkId];
          if (!deployedNetwork) {
            setStatus('Contract not deployed on this network. Please check your MetaMask network.');
            return;
          }
          const instance = new web3.eth.Contract(
            MessengerContract.abi,
            deployedNetwork && deployedNetwork.address,
          );
          setContract(instance);
          setStatus('Connected and ready.');
        } else {
          setStatus('MetaMask not detected. Please install MetaMask to use this app.');
        }
      } catch (error) {
        console.error("Initialization error:", error);
        setStatus('Could not connect to wallet or contract.');
      }
    };
    init();
  }, []);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!contract || !recipient || !messageContent) {
      alert("Please fill in recipient and message.");
      return;
    }
    setStatus('Sending message...');
    try {
      await contract.methods.sendMessage(recipient, messageContent).send({ from: account });
      setStatus('Message sent successfully!');
      setMessageContent('');
    } catch (error) {
      console.error("Error sending message:", error);
      setStatus('Error sending message.');
    }
  };

  const handleRefreshMessages = async () => {
    if (!contract) return;
    setStatus('Refreshing messages...');
    try {
      const received = await contract.methods.getMyMessages().call({ from: account });
      setMessages(received);
      setStatus(received.length > 0 ? 'Messages loaded.' : 'No messages found.');
    } catch (error) {
      console.error("Error fetching messages:", error);
      setStatus('Error fetching messages.');
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center p-8">
      <div className="w-full max-w-4xl">
        <header className="text-center mb-10">
          <h1 className="text-5xl font-bold text-cyan-400">Onion Chain Messenger</h1>
          <p className="text-gray-400 mt-2">A Decentralized Messaging DApp Simulation</p>
        </header>

        <div className="bg-gray-800 p-6 rounded-lg shadow-lg mb-8">
          <h2 className="text-2xl font-semibold mb-2">Connection Status</h2>
          <p className="text-sm text-gray-400">Status: <span className="text-green-400">{status}</span></p>
          <p className="text-sm text-gray-400 mt-1">Your Account: <span className="text-yellow-400 break-all">{account}</span></p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Send Message Section */}
          <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
            <h2 className="text-2xl font-semibold mb-4">Send a Message</h2>
            <form onSubmit={handleSendMessage}>
              <div className="mb-4">
                <label htmlFor="recipient" className="block text-sm font-medium text-gray-300">Recipient Address</label>
                <input
                  type="text"
                  id="recipient"
                  className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2 focus:ring-cyan-500 focus:border-cyan-500"
                  value={recipient}
                  onChange={(e) => setRecipient(e.target.value)}
                  placeholder="0x..."
                />
              </div>
              <div className="mb-4">
                <label htmlFor="message" className="block text-sm font-medium text-gray-300">Message</label>
                <textarea
                  id="message"
                  rows="4"
                  className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2 focus:ring-cyan-500 focus:border-cyan-500"
                  value={messageContent}
                  onChange={(e) => setMessageContent(e.target.value)}
                  placeholder="Your secure message here..."
                ></textarea>
              </div>
              <button type="submit" className="w-full bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                Send Message
              </button>
            </form>
          </div>

          {/* Received Messages Section */}
          <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-semibold">Received Messages</h2>
              <button onClick={handleRefreshMessages} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                Refresh
              </button>
            </div>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {messages.length > 0 ? messages.map((msg, index) => (
                <div key={index} className="bg-gray-700 p-4 rounded-md">
                  <p className="text-cyan-400 font-mono text-sm break-all">From: {msg.sender}</p>
                  <p className="mt-2 text-lg">{msg.content}</p>
                  <p className="text-right text-xs text-gray-500 mt-2">{new Date(Number(msg.timestamp) * 1000).toLocaleString()}</p>
                </div>
              )).reverse() : <p className="text-gray-500">No messages yet. Click refresh to check.</p>}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
